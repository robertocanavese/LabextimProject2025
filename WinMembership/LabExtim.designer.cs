#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinMembership
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="LabExtim")]
	public partial class LabExtimDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEmployee(Employee instance);
    partial void UpdateEmployee(Employee instance);
    partial void DeleteEmployee(Employee instance);
    #endregion
		
		public LabExtimDataContext() : 
				base(global::WinMembership.Properties.Settings.Default.LebExtimConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LabExtimDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LabExtimDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LabExtimDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LabExtimDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Employee> Employees
		{
			get
			{
				return this.GetTable<Employee>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Employees")]
	public partial class Employee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CompanyCode;
		
		private string _Name;
		
		private string _Surname;
		
		private System.Nullable<System.DateTime> _HireDate;
		
		private System.Nullable<System.DateTime> _LeavingDate;
		
		private System.Nullable<int> _ID_Manager;
		
		private System.Nullable<int> _ID_Dept;
		
		private System.Nullable<int> _ID_Machine;
		
		private string _UniqueName;
		
		private System.Nullable<System.Guid> _UserGUID;
		
		private EntitySet<Employee> _Employees;
		
		private EntityRef<Employee> _Employee1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompanyCodeChanging(System.Nullable<int> value);
    partial void OnCompanyCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnHireDateChanging(System.Nullable<System.DateTime> value);
    partial void OnHireDateChanged();
    partial void OnLeavingDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLeavingDateChanged();
    partial void OnID_ManagerChanging(System.Nullable<int> value);
    partial void OnID_ManagerChanged();
    partial void OnID_DeptChanging(System.Nullable<int> value);
    partial void OnID_DeptChanged();
    partial void OnID_MachineChanging(System.Nullable<int> value);
    partial void OnID_MachineChanged();
    partial void OnUniqueNameChanging(string value);
    partial void OnUniqueNameChanged();
    partial void OnUserGUIDChanging(System.Nullable<System.Guid> value);
    partial void OnUserGUIDChanged();
    #endregion
		
		public Employee()
		{
			this._Employees = new EntitySet<Employee>(new Action<Employee>(this.attach_Employees), new Action<Employee>(this.detach_Employees));
			this._Employee1 = default(EntityRef<Employee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyCode", DbType="Int")]
		public System.Nullable<int> CompanyCode
		{
			get
			{
				return this._CompanyCode;
			}
			set
			{
				if ((this._CompanyCode != value))
				{
					this.OnCompanyCodeChanging(value);
					this.SendPropertyChanging();
					this._CompanyCode = value;
					this.SendPropertyChanged("CompanyCode");
					this.OnCompanyCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HireDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> HireDate
		{
			get
			{
				return this._HireDate;
			}
			set
			{
				if ((this._HireDate != value))
				{
					this.OnHireDateChanging(value);
					this.SendPropertyChanging();
					this._HireDate = value;
					this.SendPropertyChanged("HireDate");
					this.OnHireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LeavingDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> LeavingDate
		{
			get
			{
				return this._LeavingDate;
			}
			set
			{
				if ((this._LeavingDate != value))
				{
					this.OnLeavingDateChanging(value);
					this.SendPropertyChanging();
					this._LeavingDate = value;
					this.SendPropertyChanged("LeavingDate");
					this.OnLeavingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Manager", DbType="Int")]
		public System.Nullable<int> ID_Manager
		{
			get
			{
				return this._ID_Manager;
			}
			set
			{
				if ((this._ID_Manager != value))
				{
					if (this._Employee1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ManagerChanging(value);
					this.SendPropertyChanging();
					this._ID_Manager = value;
					this.SendPropertyChanged("ID_Manager");
					this.OnID_ManagerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Dept", DbType="Int")]
		public System.Nullable<int> ID_Dept
		{
			get
			{
				return this._ID_Dept;
			}
			set
			{
				if ((this._ID_Dept != value))
				{
					this.OnID_DeptChanging(value);
					this.SendPropertyChanging();
					this._ID_Dept = value;
					this.SendPropertyChanged("ID_Dept");
					this.OnID_DeptChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Machine", DbType="Int")]
		public System.Nullable<int> ID_Machine
		{
			get
			{
				return this._ID_Machine;
			}
			set
			{
				if ((this._ID_Machine != value))
				{
					this.OnID_MachineChanging(value);
					this.SendPropertyChanging();
					this._ID_Machine = value;
					this.SendPropertyChanged("ID_Machine");
					this.OnID_MachineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniqueName", AutoSync=AutoSync.Always, DbType="NVarChar(135)", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string UniqueName
		{
			get
			{
				return this._UniqueName;
			}
			set
			{
				if ((this._UniqueName != value))
				{
					this.OnUniqueNameChanging(value);
					this.SendPropertyChanging();
					this._UniqueName = value;
					this.SendPropertyChanged("UniqueName");
					this.OnUniqueNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> UserGUID
		{
			get
			{
				return this._UserGUID;
			}
			set
			{
				if ((this._UserGUID != value))
				{
					this.OnUserGUIDChanging(value);
					this.SendPropertyChanging();
					this._UserGUID = value;
					this.SendPropertyChanged("UserGUID");
					this.OnUserGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Employee", Storage="_Employees", ThisKey="ID", OtherKey="ID_Manager")]
		public EntitySet<Employee> Employees
		{
			get
			{
				return this._Employees;
			}
			set
			{
				this._Employees.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Employee_Employee", Storage="_Employee1", ThisKey="ID_Manager", OtherKey="ID", IsForeignKey=true)]
		public Employee Employee1
		{
			get
			{
				return this._Employee1.Entity;
			}
			set
			{
				Employee previousValue = this._Employee1.Entity;
				if (((previousValue != value) 
							|| (this._Employee1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Employee1.Entity = null;
						previousValue.Employees.Remove(this);
					}
					this._Employee1.Entity = value;
					if ((value != null))
					{
						value.Employees.Add(this);
						this._ID_Manager = value.ID;
					}
					else
					{
						this._ID_Manager = default(Nullable<int>);
					}
					this.SendPropertyChanged("Employee1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = this;
		}
		
		private void detach_Employees(Employee entity)
		{
			this.SendPropertyChanging();
			entity.Employee1 = null;
		}
	}
}
#pragma warning restore 1591
