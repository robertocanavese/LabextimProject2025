using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Web.DynamicData;
using System.Web.UI.WebControls;
using DLLabExtim;
using UILabExtim;

namespace LabExtim
{
    public partial class PickingItemsValidation : QuotationController
    {
        protected Mode CurPickingItemsConsoleMode
        {
            get
            {
                if (ViewState["CurPickingItemsConsoleMode"] == null)
                {
                    return Mode.InputItems;
                }
                return (Mode) ViewState["CurPickingItemsConsoleMode"];
            }
            set { ViewState["CurPickingItemsConsoleMode"] = value; }
        }

        protected void Page_Init(object sender, EventArgs e)
        {
            DynamicDataManager1.RegisterControl(grdPickingItems);
            //DynamicDataManager1.RegisterControl(grdQuotationResults);
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            //MetaTable table = GridDataSource.GetTable();
            //InitSelectionData();

            if (!IsPostBack)
            {
                FillControls();
                SwitchDependingControls(CurPickingItemsConsoleMode);
            }
            FillDependingControls(CurPickingItemsConsoleMode);
        }

        private void FillControls()
        {
            ddlOrderBy.Items.Add(new ListItem("Descrizione voce", "ItemDescriptionChecked"));
            ddlOrderBy.Items.Add(new ListItem("Dipendenza", "IDDep"));
            ddlOrderBy.Items.Add(new ListItem("Ordine", "Order"));
            ddlOrderBy.DataBind();
        }

        protected void FillDependingControls(Mode mode)
        {
        }

        protected void GetModeDescription(Mode mode)
        {
            switch (mode)
            {
                case Mode.InputItems:
                    lblModeDescription.Text = "(gestione voci attive)";
                    break;
                case Mode.DeactivatedItems:
                    lblModeDescription.Text = "(gestione voci disattivate)";
                    break;
                default:
                    lblModeDescription.Text = "";
                    break;
            }
        }

        protected void SwitchDependingControls(Mode mode)
        {
            ToggleSuccessMessage(false, lblSuccess, LabExtimErrorType.Empty);
            grdPickingItems.Visible = mode == Mode.InputItems || mode == Mode.DeactivatedItems;
            CurPickingItemsConsoleMode = mode;
            GetModeDescription(CurPickingItemsConsoleMode);
        }

        protected void lbtViewInputItems_Click(object sender, EventArgs e)
        {
            GridDataSource.WhereParameters["Inserted"].DefaultValue = true.ToString();
            grdPickingItems.AutoGenerateDeleteButton = false;
            SwitchDependingControls(Mode.InputItems);
            OnFilterSelectedIndexChanged(null, null);
        }

        protected void lbtViewDeactivatedItems_Click(object sender, EventArgs e)
        {
            GridDataSource.WhereParameters["Inserted"].DefaultValue = false.ToString();
            grdPickingItems.AutoGenerateDeleteButton = true;
            SwitchDependingControls(Mode.DeactivatedItems);
            OnFilterSelectedIndexChanged(null, null);
        }

        protected void grdPickingItems_PageIndexChanging(object sender, GridViewPageEventArgs e)
        {
            grdPickingItems.PageIndex = e.NewPageIndex;
            //SwitchDependingControls(Mode.InputItems);
            SwitchDependingControls(CurPickingItemsConsoleMode);
        }

        protected void lbtPrintPickingItems_Click(object sender, EventArgs e)
        {
            Response.Redirect(
                string.Format("{2}?{0}={1}", GenericReportKey, "UngroupablePickingItems", GenericPrintPage), true);
        }

        protected void OnFilterSelectedIndexChanged(object sender, EventArgs e)
        {
            grdPickingItems.EditIndex = -1;
            grdPickingItems.PageIndex = 0;
        }

        protected void ddlTypes_DataBound(object sender, EventArgs e)
        {
            ddlTypes.Items.Insert(0, new ListItem("Tutti", ""));

            if (Session["UngroupablePickingItemsTypesSelector"] != null)
            {
                ddlTypes.Items.FindByValue(Session["UngroupablePickingItemsTypesSelector"].ToString()).Selected = true;
            }
            else
            {
                using (var _qc = new QuotationDataContext())
                {
                    var _firstType = _qc.Types.OrderBy(t => t.Order).FirstOrDefault();
                    ddlTypes.Items.FindByValue(_firstType.Code.ToString()).Selected = true;
                }
            }
        }

        protected void ddlItemTypes_DataBound(object sender, EventArgs e)
        {
            ddlItemTypes.Items.Insert(0, new ListItem("Tutti", ""));
            if (Session["UngroupablePickingItemsItemTypesSelector"] != null)
            {
                ddlItemTypes.Items.FindByValue(Session["UngroupablePickingItemsItemTypesSelector"].ToString()).Selected
                    = true;
            }
        }

        //protected void ddlSuppliers_DataBound(object sender, EventArgs e)
        //{
        //    ddlSuppliers.Items.Insert(0, new ListItem("Tutti", ""));
        //    if (Session["PickingItemsSuppliersSelector"] != null)
        //    {
        //        ddlSuppliers.Items.FindByValue(Session["PickingItemsSuppliersSelector"].ToString()).Selected = true;
        //    }
        //}

        protected void ddlOrderBy_DataBound(object sender, EventArgs e)
        {
            if (Session["UngroupablePickingItemsOrderBySelector"] != null)
            {
                ddlOrderBy.Items.FindByValue(Session["UngroupablePickingItemsOrderBySelector"].ToString()).Selected =
                    true;
            }
        }

        protected void GridDataSource_Selected(object sender, LinqDataSourceStatusEventArgs e)
        {
            //System.Type typeList = e.Result.GetType(); //List<T> for a select statement
            //System.Type typeObj = e.Result.GetType().GetGenericArguments()[0]; //<T>
            //object ojb = Activator.CreateInstance(typeObj);  //new T
            //// insert the new T into the list by using InvokeMember on the List<T>
            //object result = null;
            //object[] arguments = { 0, ojb };
            //result = typeList.InvokeMember("Insert", BindingFlags.InvokeMethod, null, e.Result, arguments);
        }

        protected void OnGridViewDataBound(object sender, EventArgs e)
        {
            //if (grdPickingItems.Rows.Count == 0 && grdPickingItems.PageIndex == 0)
            //{
            //    dtvPickingItem.ChangeMode(DetailsViewMode.Insert);
            //}
        }

        protected void grdPickingItems_RowDataBound(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                e.Row.Attributes["onmouseover"] = "this.style.cursor='hand';this.style.textDecoration='underline';";
                e.Row.Attributes["onmouseout"] = "this.style.textDecoration='none';";

                //e.Row.Attributes["onclick"] = ClientScript.GetPostBackClientHyperlink(this.grdPickingItems, "Select$" + e.Row.RowIndex);

                var _row = e.Row;
                if (((VW_UngroupablePickingItem) e.Row.DataItem).Inserted == false)
                {
                    _row.ForeColor = Color.Red;
                }

                var _hypEdit = (HyperLink) e.Row.Cells[1].FindControl("hypEdit");
                _hypEdit.Attributes.Add("onclick",
                    "javascript:OpenItem('PickingItemPopup.aspx?ID=" +
                    ((VW_UngroupablePickingItem) e.Row.DataItem).IDChecked + "')");

                var _hypEditDep = (HyperLink) e.Row.Cells[7].FindControl("hypEditDep");
                _hypEditDep.Attributes.Add("onclick",
                    "javascript:OpenItem('PickingItemPopup.aspx?ID=" +
                    ((VW_UngroupablePickingItem) e.Row.DataItem).IDDep + "')");
            }
        }

        protected void GridDataSource_Selecting(object sender, LinqDataSourceSelectEventArgs e)
        {
            //lblddlOrderBy.Visible = true;
            //ddlOrderBy.Visible = true;

            //if (ddlOrderBy.SelectedValue == "")
            //{
            //    GridDataSource.OrderByParameters.Clear();
            //    GridDataSource.AutoGenerateOrderByClause = false;
            //    MetaTable table = GridDataSource.GetTable();
            //    QuotationDataContext _qc = (QuotationDataContext)table.CreateContext();
            //    e.Result = _qc.PickingItems.OrderBy(pi => pi.Type.Order).ThenBy(pi => pi.ItemType.Order).ThenBy(pi => pi.Order);
            //    //.Join<PickingItem, DLLabExtim.Type, int, PickingItem>(_qc.Types, pi => pi.TypeCode, o => o.Code, (o, e2) => o)
            //    //.Join<PickingItem, DLLabExtim.ItemType, int, PickingItem>(_qc.ItemTypes, pi => pi.ItemTypeCode, o => o.Code, (o, e2) => o);
            //}

            var table = GridDataSource.GetTable();
            var _qc = (QuotationDataContext) table.CreateContext();
            switch (ddlOrderBy.SelectedValue)
            {
                case (""):
                    GridDataSource.OrderByParameters.Clear();
                    GridDataSource.AutoGenerateOrderByClause = false;
                    e.Result = _qc.VW_UngroupablePickingItems.OrderBy(pi => pi.IDChecked);
                    break;
                default:
                    break;
            }
        }

        protected void grdPickingItems_RowDeleted(object sender, GridViewDeletedEventArgs e)
        {
            if (e.Exception != null)
            {
                ToggleSuccessMessage(false, lblSuccess, LabExtimErrorType.CannotDelete);
                e.ExceptionHandled = true;
            }
        }

        protected void PersistSelection(object sender, EventArgs e)
        {
            Session["UngroupablePickingItemsTypesSelector"] = ddlTypes.SelectedValue;
            Session["UngroupablePickingItemsItemTypesSelector"] = ddlItemTypes.SelectedValue;
            //Session["PickingItemsSuppliersSelector"] = ddlSuppliers.SelectedValue;
            Session["UngroupablePickingItemsOrderBySelector"] = ddlOrderBy.SelectedValue;
        }

        protected void grdPickingItems_RowCommand(object sender, GridViewCommandEventArgs e)
        {
            if (e.CommandName == "Reload")
            {
                grdPickingItems.DataBind();
            }
        }

        protected enum Mode
        {
            InputItems,
            DeactivatedItems
        }
    }

    public class CaseInsensitiveComparer6 : IComparer<string>
    {
        public int Compare(string x, string y)
        {
            return string.Compare(x, y, true);
        }
    }
}